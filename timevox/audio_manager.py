# audio_manager.py
"""
Gestionnaire audio pour la lecture des annonces et des bips
Version portable avec gestion automatique des chemins et volume configurable
Version corrig√©e avec retry audio pour d√©marrage syst√®me
"""

import pygame
import os
import time
from config import (
    PYGAME_FREQUENCY, PYGAME_SIZE, PYGAME_CHANNELS, PYGAME_BUFFER,
    SEARCH_CORRESPONDANT_FILE, BIP_FILE, ensure_directories
)


class AudioManager:
    def __init__(self, gpio_manager, usb_manager=None):
        self.gpio_manager = gpio_manager
        self.usb_manager = usb_manager
        self.mixer_initialized = False  # FLAG pour savoir si pygame fonctionne
        
        # NOUVEAU: Logger sur USB pour diagnostic
        self.log_to_usb("=== TIMEVOX AUDIO INIT START ===")
        
        # Cr√©er les dossiers n√©cessaires au d√©marrage
        ensure_directories()
        self.init_pygame_with_retry()
        self.set_volume_from_config()
        self.check_audio_files()
        
        self.log_to_usb(f"Audio init termin√© - pygame OK: {self.mixer_initialized}")

    def get_best_audio_device(self):
        """D√©termine le meilleur p√©riph√©rique audio √† utiliser"""
        try:
            import subprocess
            
            # Obtenir la liste des cartes audio
            result = subprocess.run(["aplay", "-l"], capture_output=True, text=True, timeout=3)
            if result.returncode != 0:
                self.log_to_usb("‚ùå Impossible d'obtenir liste p√©riph√©riques audio")
                return None
            
            self.log_to_usb(f"Liste p√©riph√©riques audio:\n{result.stdout}")
            
            # Parser pour trouver le premier p√©riph√©rique disponible
            lines = result.stdout.split('\n')
            for line in lines:
                if 'card' in line and ':' in line:
                    # Format: "card 0: bcm2835HDMI [bcm2835 HDMI], device 0: bcm2835 HDMI [bcm2835 HDMI]"
                    try:
                        # Extraire le num√©ro de carte
                        card_part = line.split('card ')[1].split(':')[0].strip()
                        # Chercher le device
                        if 'device' in line:
                            device_part = line.split('device ')[1].split(':')[0].strip()
                            device_name = f"hw:{card_part},{device_part}"
                        else:
                            device_name = f"hw:{card_part},0"
                        
                        self.log_to_usb(f"P√©riph√©rique trouv√©: {device_name}")
                        
                        # Test rapide du p√©riph√©rique
                        test_cmd = ["aplay", "-D", device_name, "--dump-hw-params", "/dev/zero"]
                        test_result = subprocess.run(test_cmd, capture_output=True, timeout=2)
                        if test_result.returncode == 0 or "Sample format not available" in test_result.stderr:
                            self.log_to_usb(f"‚úÖ P√©riph√©rique {device_name} accessible")
                            return device_name
                        else:
                            self.log_to_usb(f"‚ùå P√©riph√©rique {device_name} non accessible")
                    except Exception as e:
                        self.log_to_usb(f"Erreur parsing ligne: {line} - {e}")
                        continue
            
            # Fallback: essayer les p√©riph√©riques standards
            standard_devices = ["hw:0,0", "hw:1,0", "default", "pulse"]
            for device in standard_devices:
                self.log_to_usb(f"Test p√©riph√©rique fallback: {device}")
                test_cmd = ["aplay", "-D", device, "--dump-hw-params", "/dev/zero"]
                test_result = subprocess.run(test_cmd, capture_output=True, timeout=2)
                if test_result.returncode == 0 or "Sample format not available" in test_result.stderr:
                    self.log_to_usb(f"‚úÖ P√©riph√©rique fallback {device} OK")
                    return device
                    
            self.log_to_usb("‚ùå Aucun p√©riph√©rique audio trouv√©")
            return None
            
        except Exception as e:
            self.log_to_usb(f"Erreur d√©tection p√©riph√©rique audio: {e}")
            return None
        """Afficher le statut audio sur l'√©cran OLED pour diagnostic"""
        try:
            # Import local pour √©viter les d√©pendances circulaires
            from oled_display import afficher
            afficher("Audio Init", message, "", taille=10, align="centre")
            time.sleep(2)  # Laisser le temps de voir le message
        except Exception as e:
            print(f"Erreur affichage OLED: {e}")
    
    def init_pygame_with_retry(self, max_attempts=20, delay=5):
        """Initialise pygame mixer avec retry pour attendre que l'audio soit pr√™t"""
        self.log_to_usb("üîä D√©but initialisation audio...")
        
        # D√©terminer le bon p√©riph√©rique audio √† utiliser
        audio_device = self.get_best_audio_device()
        self.log_to_usb(f"P√©riph√©rique audio s√©lectionn√©: {audio_device}")
        
        for attempt in range(max_attempts):
            try:
                self.log_to_usb(f"Tentative {attempt + 1}/{max_attempts}")
                print(f"Tentative d'initialisation audio {attempt + 1}/{max_attempts}")
                
                # Nettoyer pygame au cas o√π
                try:
                    pygame.mixer.quit()
                except:
                    pass
                
                # V√©rifier d'abord que le syst√®me audio r√©pond
                if attempt > 0:  # Apr√®s la premi√®re tentative
                    alsa_ready = self.check_alsa_ready()
                    self.log_to_usb(f"ALSA ready: {alsa_ready}")
                    if not alsa_ready:
                        self.log_to_usb(f"ALSA pas pr√™t, attente {delay}s...")
                        print(f"ALSA pas encore pr√™t, attente {delay}s...")
                        time.sleep(delay)
                        continue
                
                # NOUVEAU: D√©finir le p√©riph√©rique ALSA avant pygame
                if audio_device:
                    os.environ['SDL_AUDIODRIVER'] = 'alsa'
                    os.environ['ALSA_DEVICE'] = audio_device
                    self.log_to_usb(f"For√ßage p√©riph√©rique: {audio_device}")
                
                # Initialiser avec param√®tres optimis√©s
                pygame.mixer.pre_init(
                    frequency=PYGAME_FREQUENCY, 
                    size=PYGAME_SIZE, 
                    channels=PYGAME_CHANNELS, 
                    buffer=PYGAME_BUFFER
                )
                pygame.mixer.init()
                
                # Test que l'initialisation fonctionne vraiment
                pygame.mixer.music.set_volume(0.1)
                
                success_msg = f"‚úÖ Pygame mixer initialis√© (tentative {attempt + 1})"
                print(success_msg)
                self.log_to_usb(success_msg)
                #self.show_audio_status_on_display("Audio OK!")
                self.mixer_initialized = True
                return True
                
            except Exception as e:
                error_msg = f"‚ùå Tentative {attempt + 1} √©chou√©e: {e}"
                print(error_msg)
                self.log_to_usb(error_msg)
                
                if attempt < max_attempts - 1:
                    self.log_to_usb(f"Attente {delay}s avant retry...")
                    print(f"Attente {delay} secondes avant retry...")
                    time.sleep(delay)
                else:
                    self.log_to_usb("‚ö†Ô∏è Toutes tentatives √©chou√©es, essai basique...")
                    print("‚ö†Ô∏è Toutes les tentatives d'initialisation audio ont √©chou√©")
                    print("Tentative d'initialisation basique...")
                    try:
                        pygame.mixer.init()
                        self.log_to_usb("‚úÖ Init basique r√©ussie")
                        print("‚úÖ Initialisation basique r√©ussie")
                        self.mixer_initialized = True
                        return True
                    except Exception as e2:
                        final_error = f"‚ùå Init basique √©chou√©e: {e2}"
                        print(final_error)
                        self.log_to_usb(final_error)
                        self.mixer_initialized = False
                        return False
        
        self.log_to_usb("‚ùå √âchec complet initialisation audio")
        #self.show_audio_status_on_display("Audio FAIL!")
        return False

    def log_to_usb(self, message):
        """Log des messages de diagnostic sur la cl√© USB"""
        try:
            if self.usb_manager and self.usb_manager.is_usb_available():
                import datetime
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                log_entry = f"{timestamp} - {message}\n"
                
                log_dir = os.path.join(self.usb_manager.usb_path, "Logs")
                if not os.path.exists(log_dir):
                    os.makedirs(log_dir)
                
                log_file = os.path.join(log_dir, "audio_debug.log")
                with open(log_file, 'a', encoding='utf-8') as f:
                    f.write(log_entry)
        except Exception as e:
            print(f"Erreur log USB: {e}")  # Fallback console
    
    def check_alsa_ready(self):
        """V√©rifier que ALSA est pr√™t avant d'initialiser pygame"""
        try:
            import subprocess
            # Test rapide: lister les cartes audio
            result = subprocess.run(
                ["aplay", "-l"], 
                capture_output=True, 
                text=True, 
                timeout=3
            )
            if result.returncode == 0 and "card" in result.stdout:
                self.log_to_usb("‚úÖ ALSA r√©pond - p√©riph√©riques d√©tect√©s")
                print("‚úÖ ALSA r√©pond - p√©riph√©riques audio d√©tect√©s")
                return True
            else:
                self.log_to_usb(f"‚ùå ALSA ne r√©pond pas: code {result.returncode}")
                print("‚ùå ALSA ne r√©pond pas correctement")
                return False
        except Exception as e:
            error_msg = f"‚ùå Test ALSA √©chou√©: {e}"
            self.log_to_usb(error_msg)
            print(error_msg)
            return False
    
    def init_pygame(self):
        """Version originale gard√©e pour compatibilit√©"""
        return self.init_pygame_with_retry()
    
    def set_volume_from_config(self):
        """Configure le volume depuis le fichier config.json de la cl√© USB"""
        volume_pygame = 0.02  # Valeur par d√©faut (2%)
        
        if self.usb_manager and self.usb_manager.is_usb_available():
            try:
                config_info = self.usb_manager.get_config_info()
                if 'volume_audio' in config_info:
                    volume_percent = config_info['volume_audio']
                    # Convertir le pourcentage en valeur pygame (0.0 √† 1.0)
                    volume_pygame = volume_percent / 100.0
                    # S'assurer que la valeur reste dans les limites
                    volume_pygame = max(0.0, min(1.0, volume_pygame))
                    print(f"Volume configur√© depuis USB: {volume_percent}% -> {volume_pygame}")
                else:
                    print("Param√®tre 'volume_audio' non trouv√© dans config.json - utilisation valeur par d√©faut (2%)")
            except Exception as e:
                print(f"Erreur lecture volume depuis USB: {e}")
                print("Utilisation du volume par d√©faut (2%)")
        else:
            print("Cl√© USB non disponible - utilisation du volume par d√©faut (2%)")
        
        # Appliquer le volume √† pygame avec v√©rification
        try:
            if self.mixer_initialized:
                pygame.mixer.music.set_volume(volume_pygame)
                print(f"Volume pygame d√©fini √†: {volume_pygame} ({volume_pygame * 100:.1f}%)")
            else:
                print(f"‚ö†Ô∏è Pygame non initialis√© - volume {volume_pygame * 100:.1f}% sera appliqu√© plus tard")
        except Exception as e:
            print(f"‚ùå Erreur d√©finition volume: {e}")
    
    def check_audio_files(self):
        """V√©rifie la pr√©sence des fichiers audio et affiche des avertissements si n√©cessaire"""
        if not os.path.exists(SEARCH_CORRESPONDANT_FILE):
            print(f"‚ö†Ô∏è  ATTENTION: Fichier manquant - {SEARCH_CORRESPONDANT_FILE}")
            print("   Placez le fichier search_correspondant.mp3 dans le dossier sounds/")
        
        if not os.path.exists(BIP_FILE):
            print(f"‚ö†Ô∏è  ATTENTION: Fichier manquant - {BIP_FILE}")
            print("   Placez le fichier bip.mp3 dans le dossier sounds/")
    
    def get_search_correspondant_path(self):
        """Retourne le chemin vers le fichier search_correspondant.mp3"""
        if os.path.exists(SEARCH_CORRESPONDANT_FILE):
            print(f"Fichier search_correspondant trouv√©: {SEARCH_CORRESPONDANT_FILE}")
            return SEARCH_CORRESPONDANT_FILE
        else:
            print(f"Fichier search_correspondant.mp3 non trouv√©: {SEARCH_CORRESPONDANT_FILE}")
            return None
    
    def get_bip_path(self):
        """Retourne le chemin vers le fichier bip.mp3"""
        if os.path.exists(BIP_FILE):
            print(f"Fichier bip trouv√©: {BIP_FILE}")
            return BIP_FILE
        else:
            print(f"Fichier bip.mp3 non trouv√©: {BIP_FILE}")
            return None
    
    def update_volume_from_config(self):
        """Met √† jour le volume depuis la configuration (utile pour recharger √† chaud)"""
        self.set_volume_from_config()
    
    def play_audio(self, path):
        """
        Lit un fichier audio et surveille le raccrochage
        Retourne True si la lecture s'est bien d√©roul√©e, False si interrompue
        """
        if not self.mixer_initialized:
            print("‚ùå Pygame mixer non initialis√© - impossible de lire l'audio")
            return False
            
        try:
            print(f"Tentative de lecture: {path}")

            # V√©rifier que le fichier existe
            if not os.path.exists(path):
                print(f"Fichier inexistant: {path}")
                return False

            # V√©rifier la taille du fichier
            file_size = os.path.getsize(path)
            print(f"Taille du fichier: {file_size} bytes")
            if file_size == 0:
                print("Fichier vide")
                return False

            # Arr√™ter toute musique en cours
            pygame.mixer.music.stop()
            time.sleep(0.1)

            # Charger et jouer
            pygame.mixer.music.load(path)
            pygame.mixer.music.play()
            print("Lecture d√©marr√©e...")

            # Attendre que la lecture commence vraiment
            timeout = 0
            while not pygame.mixer.music.get_busy() and timeout < 50:
                time.sleep(0.1)
                timeout += 1

            if not pygame.mixer.music.get_busy():
                print("√âchec d√©marrage lecture")
                return False

            print("Lecture en cours...")
            while pygame.mixer.music.get_busy():
                if self.gpio_manager.is_phone_on_hook():
                    print("Raccrochage d√©tect√© pendant lecture")
                    pygame.mixer.music.stop()
                    return False
                time.sleep(0.1)
            
            print("Lecture termin√©e.")
            return True
            
        except Exception as e:
            print(f"Erreur lecture audio: {e}")
            print(f"Type erreur: {type(e)}")
            return False
    
    def stop_audio(self):
        """Arr√™te la lecture audio en cours"""
        if not self.mixer_initialized:
            # Ne pas logger d'erreur si pygame n'est pas initialis√©
            return
            
        try:
            if pygame.mixer.music.get_busy():
                pygame.mixer.music.stop()
                print("Musique arr√™t√©e")
        except Exception as e:
            print(f"Erreur arr√™t audio: {e}")