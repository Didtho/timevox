#!/usr/bin/env python3
"""
Script de gestion du bouton d'arr√™t pour Raspberry Pi
Compatible avec le projet TimeVox
"""

import RPi.GPIO as GPIO
import subprocess
import time
import signal
import sys
import os

# Ajouter le r√©pertoire du projet au path pour importer oled_display
project_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_dir)
print(f"R√©pertoire du projet: {project_dir}")

try:
    from oled_display import afficher as afficher_texte
    OLED_AVAILABLE = True
    print("‚úÖ Module OLED import√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Module OLED non disponible: {e}")
    OLED_AVAILABLE = False
except Exception as e:
    print(f"‚ùå Erreur import OLED: {e}")
    OLED_AVAILABLE = False

# Configuration
SHUTDOWN_GPIO = 26  # Pin GPIO pour le bouton d'arr√™t (GPIO libre sur TimeVox)
HOLD_TIME = 3       # Dur√©e d'appui n√©cessaire en secondes

class ShutdownManager:
    def __init__(self):
        self.shutdown_in_progress = False
        self.LED_GPIO = 16
        self.setup_gpio()
        self.setup_signal_handlers()
        self.setup_power_led()
    
    def setup_gpio(self):
        """Configure le GPIO pour le bouton d'arr√™t"""
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        GPIO.setup(SHUTDOWN_GPIO, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(self.LED_GPIO, GPIO.OUT)
        print(f"Bouton d'arr√™t configur√© sur GPIO {SHUTDOWN_GPIO}")
        print(f"LED power configur√©e sur GPIO {self.LED_GPIO}")
    
    def setup_power_led(self):
        """Allume la LED power au d√©marrage"""
        try:
            GPIO.output(self.LED_GPIO, GPIO.HIGH)
            print("LED power allum√©e - syst√®me pr√™t")
        except Exception as e:
            print(f"Erreur LED power: {e}")
    
    def setup_signal_handlers(self):
        """Configure les gestionnaires de signaux pour un arr√™t propre"""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """Gestionnaire pour les signaux d'arr√™t"""
        print(f"\nSignal {signum} re√ßu, arr√™t du service...")
        try:
            # √âteindre la LED si possible
            if hasattr(self, 'LED_GPIO'):
                GPIO.output(self.LED_GPIO, GPIO.LOW)
            # Effacer l'√©cran
            self.clear_display()
        except:
            pass
        finally:
            try:
                GPIO.cleanup()
            except:
                pass
        sys.exit(0)
    
    def display_shutdown_message(self, message):
        """Affiche un message sur l'√©cran OLED ou en console"""
        print(f"üñ•Ô∏è  Message d'arr√™t: '{message}'")
        if OLED_AVAILABLE:
            try:
                afficher_texte("", message, "", taille=16, align="centre")
                print(f"‚úÖ Message OLED affich√©: {message}")
            except Exception as e:
                print(f"‚ùå Erreur affichage OLED: {e}")
                # Fallback : affichage console uniquement
                print(f"üì∫ CONSOLE: {message}")
        else:
            print(f"üì∫ CONSOLE (OLED indisponible): {message}")
    
    def clear_display(self):
        """Efface l'√©cran OLED"""
        print("üñ•Ô∏è  Effacement √©cran")
        if OLED_AVAILABLE:
            try:
                afficher_texte("", "", "", taille=14, align="centre")
                print("‚úÖ √âcran OLED effac√©")
            except Exception as e:
                print(f"‚ùå Erreur effacement OLED: {e}")
        else:
            print("üì∫ √âcran OLED non disponible")
    
    def is_button_pressed(self):
        """V√©rifie si le bouton est press√© (logique invers√©e avec pull-up)"""
        return not GPIO.input(SHUTDOWN_GPIO)
    
    def blink_led_countdown(self, duration):
        """
        Fait clignoter la LED pendant le d√©compte
        LED connect√©e sur GPIO 16
        """
        # Afficher message de d√©compte sur OLED
        self.display_shutdown_message("Arret en cours...")
        
        try:
            # La LED est d√©j√† allum√©e, commencer directement le clignotement
            for i in range(duration * 2):  # Clignote 2 fois par seconde
                if not self.is_button_pressed():  # V√©rifier si bouton rel√¢ch√©
                    # Remettre la LED en position "power on" si bouton rel√¢ch√©
                    GPIO.output(self.LED_GPIO, GPIO.HIGH)
                    # Effacer le message d'arr√™t
                    self.clear_display()
                    print("Bouton rel√¢ch√© - LED power r√©tablie")
                    return False
                
                # Alterner l'√©tat de la LED
                if i % 2 == 0:
                    GPIO.output(self.LED_GPIO, GPIO.LOW)   # √âteindre
                else:
                    GPIO.output(self.LED_GPIO, GPIO.HIGH)  # Allumer
                
                time.sleep(0.25)
            
            # Laisser la LED allum√©e √† la fin du d√©compte (avant arr√™t)
            GPIO.output(self.LED_GPIO, GPIO.HIGH)
            return True
            
        except Exception as e:
            print(f"Erreur LED sur GPIO {self.LED_GPIO}: {e}")
            # Fallback sans LED si erreur
            start_time = time.time()
            while time.time() - start_time < duration:
                if not self.is_button_pressed():
                    self.clear_display()
                    return False
                time.sleep(0.1)
            return True
    
    def shutdown_system(self):
        """Effectue l'arr√™t du syst√®me"""
        if self.shutdown_in_progress:
            return
        
        self.shutdown_in_progress = True
        print("ARR√äT DU SYST√àME EN COURS...")
        
        # GARDER la LED allum√©e pendant les op√©rations d'arr√™t
        # Elle ne s'√©teindra qu'au tout dernier moment
        
        try:
            # Afficher message d'arr√™t sur OLED
            self.display_shutdown_message("Fermeture...")
            
            # Envoyer un signal de terminaison aux processus TimeVox
            print("Arr√™t des processus TimeVox...")
            subprocess.run(["pkill", "-TERM", "-f", "main_timevox.py"], 
                         capture_output=True, timeout=5)
            time.sleep(1)
            
            # Message interm√©diaire
            self.display_shutdown_message("Sauvegarde...")
            
            # Synchroniser les disques
            print("Synchronisation des disques...")
            subprocess.run(["sync"], timeout=10)
            time.sleep(1)
            
            # Message final
            self.display_shutdown_message("Au revoir!")
            time.sleep(1)
            
            # MAINTENANT √©teindre la LED juste avant l'arr√™t final
            print("Extinction LED - arr√™t imminent...")
            try:
                GPIO.output(self.LED_GPIO, GPIO.LOW)
            except:
                pass
            
            # Effacer l'√©cran avant arr√™t complet
            self.clear_display()
            
            # Arr√™t syst√®me
            print("Arr√™t syst√®me...")
            subprocess.run(["sudo", "shutdown", "-h", "now"], timeout=5)
            
        except subprocess.TimeoutExpired:
            print("Timeout lors de l'arr√™t, for√ßage...")
            self.display_shutdown_message("Arret force!")
            time.sleep(1)
            # √âteindre LED avant for√ßage
            try:
                GPIO.output(self.LED_GPIO, GPIO.LOW)
            except:
                pass
            self.clear_display()
            subprocess.run(["sudo", "halt", "-f"])
        except Exception as e:
            print(f"Erreur lors de l'arr√™t: {e}")
            self.display_shutdown_message("Erreur arret!")
            time.sleep(1)
            # √âteindre LED avant for√ßage
            try:
                GPIO.output(self.LED_GPIO, GPIO.LOW)
            except:
                pass
            self.clear_display()
            subprocess.run(["sudo", "halt", "-f"])
    
    def run(self):
        """Boucle principale de surveillance du bouton"""
        print("Service bouton d'arr√™t d√©marr√©")
        print(f"Maintenez le bouton GPIO {SHUTDOWN_GPIO} pendant {HOLD_TIME}s pour arr√™ter")
        print(f"LED power sur GPIO {self.LED_GPIO} reste allum√©e (clignote pendant l'arr√™t)")
        
        try:
            while True:
                if self.is_button_pressed():
                    print(f"Bouton press√©, d√©compte de {HOLD_TIME}s...")
                    print("LED clignote pendant le d√©compte...")
                    
                    # V√©rifier que le bouton reste press√© pendant HOLD_TIME
                    if self.blink_led_countdown(HOLD_TIME):
                        print("Dur√©e d'appui atteinte - D√©marrage proc√©dure d'arr√™t")
                        print("LED reste allum√©e pendant l'arr√™t des services...")
                        self.shutdown_system()
                        break
                    else:
                        print("Bouton rel√¢ch√© - annulation arr√™t")
                
                time.sleep(0.1)  # V√©rification toutes les 100ms
                
        except KeyboardInterrupt:
            print("\nArr√™t du service bouton d'arr√™t")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Nettoyage des ressources GPIO"""
        print("Nettoyage en cours...")
        try:
            # Effacer l'√©cran OLED
            self.clear_display()
        except Exception as e:
            print(f"Erreur effacement OLED: {e}")
        
        try:
            # √âteindre la LED si elle existe
            if hasattr(self, 'LED_GPIO'):
                GPIO.output(self.LED_GPIO, GPIO.LOW)
                print("LED √©teinte")
        except Exception as e:
            print(f"Erreur LED: {e}")
        
        try:
            # Nettoyage GPIO final
            GPIO.cleanup()
            print("GPIO nettoy√©s")
        except Exception as e:
            print(f"Erreur nettoyage GPIO: {e}")

def main():
    """Point d'entr√©e principal"""
    shutdown_manager = ShutdownManager()
    shutdown_manager.run()

if __name__ == "__main__":
    main()